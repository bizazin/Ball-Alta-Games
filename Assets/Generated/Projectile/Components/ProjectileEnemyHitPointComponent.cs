//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.ComponentContextApiGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public partial class ProjectileContext {

    public ProjectileEntity enemyHitPointEntity { get { return GetGroup(ProjectileMatcher.EnemyHitPoint).GetSingleEntity(); } }
    public Scripts.Ecs.Projectile.Components.EnemyHitPointComponent enemyHitPoint { get { return enemyHitPointEntity.enemyHitPoint; } }
    public bool hasEnemyHitPoint { get { return enemyHitPointEntity != null; } }

    public ProjectileEntity SetEnemyHitPoint(UnityEngine.Vector3 newValue) {
        if (hasEnemyHitPoint) {
            throw new Entitas.EntitasException("Could not set EnemyHitPoint!\n" + this + " already has an entity with Scripts.Ecs.Projectile.Components.EnemyHitPointComponent!",
                "You should check if the context already has a enemyHitPointEntity before setting it or use context.ReplaceEnemyHitPoint().");
        }
        var entity = CreateEntity();
        entity.AddEnemyHitPoint(newValue);
        return entity;
    }

    public void ReplaceEnemyHitPoint(UnityEngine.Vector3 newValue) {
        var entity = enemyHitPointEntity;
        if (entity == null) {
            entity = SetEnemyHitPoint(newValue);
        } else {
            entity.ReplaceEnemyHitPoint(newValue);
        }
    }

    public void RemoveEnemyHitPoint() {
        enemyHitPointEntity.Destroy();
    }
}

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.ComponentEntityApiGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public partial class ProjectileEntity {

    public Scripts.Ecs.Projectile.Components.EnemyHitPointComponent enemyHitPoint { get { return (Scripts.Ecs.Projectile.Components.EnemyHitPointComponent)GetComponent(ProjectileComponentsLookup.EnemyHitPoint); } }
    public bool hasEnemyHitPoint { get { return HasComponent(ProjectileComponentsLookup.EnemyHitPoint); } }

    public void AddEnemyHitPoint(UnityEngine.Vector3 newValue) {
        var index = ProjectileComponentsLookup.EnemyHitPoint;
        var component = (Scripts.Ecs.Projectile.Components.EnemyHitPointComponent)CreateComponent(index, typeof(Scripts.Ecs.Projectile.Components.EnemyHitPointComponent));
        component.Value = newValue;
        AddComponent(index, component);
    }

    public void ReplaceEnemyHitPoint(UnityEngine.Vector3 newValue) {
        var index = ProjectileComponentsLookup.EnemyHitPoint;
        var component = (Scripts.Ecs.Projectile.Components.EnemyHitPointComponent)CreateComponent(index, typeof(Scripts.Ecs.Projectile.Components.EnemyHitPointComponent));
        component.Value = newValue;
        ReplaceComponent(index, component);
    }

    public void RemoveEnemyHitPoint() {
        RemoveComponent(ProjectileComponentsLookup.EnemyHitPoint);
    }
}

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.ComponentMatcherApiGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public sealed partial class ProjectileMatcher {

    static Entitas.IMatcher<ProjectileEntity> _matcherEnemyHitPoint;

    public static Entitas.IMatcher<ProjectileEntity> EnemyHitPoint {
        get {
            if (_matcherEnemyHitPoint == null) {
                var matcher = (Entitas.Matcher<ProjectileEntity>)Entitas.Matcher<ProjectileEntity>.AllOf(ProjectileComponentsLookup.EnemyHitPoint);
                matcher.componentNames = ProjectileComponentsLookup.componentNames;
                _matcherEnemyHitPoint = matcher;
            }

            return _matcherEnemyHitPoint;
        }
    }
}
